plugins {
    id 'java-library'

}

repositories {
    mavenCentral()
}

def selenideVersion = "5.20.3",
    junitVersion = "5.7.1"


dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:4.3.1",
            "org.aspectj:aspectjweaver:1.9.6",
            "com.codeborne:selenide:$selenideVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.19.0",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            "org.slf4j:slf4j-simple:1.7.30",
            "org.slf4j:slf4j-api:1.7.30")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
//    systemProperty "chromeoptions.prefs", "intl.accept_languages=en"

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}